#+Title: Manifest

* TODO Project Definition 
  The objective of this project is to be an essay of a simple
  parallel program using Unix function ~fork()~. There is no 
  implementation of ~fork()~ on the *Rust* language. However,
  because the facilities of Foreign Function Interface (FFI) implemented in
  Rust, we can easily use ~fork()~ from ~libc~.

  First, the basic parameters of the project are given on the following
  block:

#+begin_src toml :tangle ../Cargo.toml :exports code :noweb yes
  [package]
  name = "rust_fork"
  version = "0.0.20170216"
  authors = ["Juan Carlos Galan-Hernandez <juan.galan@udlap.mx>"]
#+end_src

  Also, we will need an extra script for extracting all source code from the
  org files. This is because this project was created using literate programming
  through org babel. The build script will be named ~build.rs~ and it should be 
  added to our package definition as:

#+begin_src toml :tangle ../Cargo.toml :exports code :noweb yes
  build = "build.rs"
#+end_src
  
  For our build script, first we need our libraries. It will have to walk over
  all the file structure inside the org directory, so we will require the following
  libraries:

#+begin_src rust :tangle ../build.rs :exports code :noweb yes
  use std::io;
  use std::fs::{self};
  use std::path::Path;
  use std::process::Command;
#+end_src

  The first three libraries: ~io~, ~fs~ and ~path~ are used for directory reading.
  The last structure ~Command~ will serve for executing the babel plugin on emacs.
  Following with the building script, we need a function that requires an org
  file and it attempts to tangle it. Such function will be named ~tangle_org~. 
  ~tangle_org~ code is:

#+begin_src rust :tangle ../build.rs :exports code :noweb yes
  fn tangle_org(parent: &Path, file: &Path) -> io::Result<()> {
      let name = file.file_name().unwrap().to_str().unwrap();
      let parent = parent.file_name().unwrap().to_str().unwrap();
      if name == "Cargo.org" {
          println!("[Tangle] Ignoring file {}", name);
          return Ok(());
      } else {
          println!("[Tangle] Tangling file {}", name);
          match file.extension() {
              Some(_) => {
                  let ext = file.extension().unwrap().to_str().unwrap();
                  if ext == "org" {
                      let command = format!("(progn 
                                               (require 'org)
                                               (require 'ob)
                                               (require 'ob-tangle)
                                               (find-file 
                                                 (expand-file-name \"{}\" \"{}\"))
                                               (org-babel-tangle)
                                               (kill-buffer))", name, parent);
                      let result = Command::new("emacs")
                          .args(&["-Q", "--batch", "--eval"])
                          .arg(&command)
                          .output()
                          .expect(&format!("Tangle: Failed command {}", name));
                      if !result.status.success() {
                          println!("[Tangle] status: {}", result.status);
                          println!("[Tangle] stderr: {}", String::from_utf8_lossy(&result.stderr));
                      } else {
                          println!("[Tangle] stdout: {}", String::from_utf8_lossy(&result.stdout));
                      }

                  }
              } 
              None => {}
          }
          return Ok(());
      }
  }
#+end_src
  ~tangle_org~ returns an empty ~Result~ so the macro ~try!~ can be used to reduce 
  boilerplate code. The build script also requires a recursive function that walks through all
  sub directories.

#+begin_src rust :tangle ../build.rs :exports code :noweb yes
  fn walk_tree(parent: &Path, dir: &Path) -> io::Result<()> {
      let full_dir_buf = parent.join(dir);
      let full_dir = full_dir_buf.as_path();
      println!("[cargo] Entering {}", full_dir.file_name().unwrap().to_str().unwrap());
      for entry in try!(fs::read_dir(full_dir)) {
          let entry = try!(entry);
          let path = entry.path();
          if path.is_dir() {
              try!(walk_tree(&parent, &path));
          } else {
              match tangle_org(&full_dir, &path) {
                  Ok(_) => {}
                  Err(_) => println!("[cargo] Error processing file")
              }
          }
      }
      Ok(())
  }
#+end_src

  Finally, ~main~ will call ~walk_tree~ using ~org~ as a default path.

#+begin_src rust :tangle ../build.rs :exports code :noweb yes
  fn main() {
      println!("Tangling org files");
      match walk_tree(Path::new(""), Path::new("./org")) {
          Ok(_) => {}
          Err(_) => println!("[cargo] Error reading org dir")
      }
  }
#+end_src

  The variable ~name~ has the name of the project as ~rust_fork~. This
  will later be the name of our executable file. ~version~ variable has 
  a given version of this example. The numbering version I personally use
  is inspired on a speech given by Richard Hickey at Clojure/con 2016.
  
  Next, we have to define our dependencies. This particular example won't have
  any dependencies, so the following section is empty.

#+begin_src toml :tangle ../Cargo.toml :exports code :noweb yes
  [dependencies]
  libc = "0.2"
#+end_src
